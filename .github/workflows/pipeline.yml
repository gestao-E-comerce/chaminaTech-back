name: CI/CD Backend Java - GKE

on:
  push:
    branches: [ "developer", "main" ]
  pull_request:
    branches: [ "developer" ]

env:
  IMAGE_NAME: heshambr/green-learning-backend
  PROJECT_ID: corded-racer-455623-i7
  CLUSTER_NAME: semanal-homol
  CLUSTER_LOCATION: us-central1
  NAMESPACE: stageback  # será alterado dinamicamente para produção se branch == main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 1010
          POSTGRES_DB: greenLearning
        options: --health-cmd="pg_isready -U postgres" --health-timeout=30s --health-start-period=5s --health-retries=5

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          # cache: maven  -- tava dando pau

      - name: Esperar PostgreSQL iniciar
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Aguardando PostgreSQL iniciar..."
            sleep 2
          done

      - name: Build com Maven
        run: mvn clean package -DskipTests

      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build da imagem Docker
        run: docker build -t $IMAGE_NAME:${GITHUB_SHA} .

      - name: Push da imagem Docker
        run: docker push $IMAGE_NAME:${GITHUB_SHA}

      - name: Autenticar no Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Instalar Google Cloud SDK com gke-gcloud-auth-plugin
        run: |
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | \
            sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
          sudo mkdir -p /usr/share/keyrings
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | \
            sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update
          sudo apt-get install -y google-cloud-sdk kubectl google-cloud-sdk-gke-gcloud-auth-plugin

      - name: Definir cluster e namespace de destino
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "CLUSTER_NAME=semanal-prod" >> $GITHUB_ENV
            echo "CLUSTER_LOCATION=us-east1" >> $GITHUB_ENV
            echo "NAMESPACE=productionback" >> $GITHUB_ENV
            echo "FRONT_NAMESPACE=productionfront" >> $GITHUB_ENV
          else
            echo "CLUSTER_NAME=semanal-homol" >> $GITHUB_ENV
            echo "CLUSTER_LOCATION=us-central1" >> $GITHUB_ENV
            echo "NAMESPACE=stageback" >> $GITHUB_ENV
            echo "FRONT_NAMESPACE=stagefront" >> $GITHUB_ENV
          fi

      - name: Acessar cluster GKE
        run: |
          gcloud container clusters get-credentials $CLUSTER_NAME --region $CLUSTER_LOCATION --project $PROJECT_ID

      - name: Criar namespace (se não existir)
        run: |
          kubectl get ns $NAMESPACE || kubectl create ns $NAMESPACE

      - name: Aplicar arquivos do Kubernetes e configurar imagem/env
        run: |
          kubectl apply -f K8s/ --namespace=$NAMESPACE
          kubectl set image deployment/backend backend=$IMAGE_NAME:${GITHUB_SHA} -n $NAMESPACE
          kubectl set env deployment/backend APP_ALLOWED_ORIGIN=http://frontend-service.$FRONT_NAMESPACE.svc.cluster.local -n $NAMESPACE